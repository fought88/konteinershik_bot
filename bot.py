import os
import json

# –°–æ—Ö—Ä–∞–Ω—è–µ–º GOOGLE_CREDENTIALS_JSON –∫–∞–∫ —Ñ–∞–π–ª
credentials_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
if credentials_json:
    with open("google_credentials.json", "w", encoding="utf-8") as f:
        f.write(credentials_json)

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from config import BOT_TOKEN, ADMIN_ID
import gspread
from datetime import datetime
import re

gc = gspread.service_account(filename="google_credentials.json")
sheet = gc.open("Konteinershik Leads").sheet1

class Form(StatesGroup):
    city = State()
    condition = State()
    type = State()
    height = State()
    urgency = State()
    phone = State()
    confirm = State()

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –≤–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.")
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
        resize_keyboard=True
    )
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)
    await state.set_state(Form.city)

@dp.message(Form.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–æ–≤—ã–π")], [KeyboardButton(text="–ë/–£")]],
        resize_keyboard=True
    )
    await message.answer("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π –∏–ª–∏ –ë/–£?", reply_markup=markup)
    await state.set_state(Form.condition)

@dp.message(Form.condition)
async def get_condition(message: Message, state: FSMContext):
    await state.update_data(condition=message.text)
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="20 —Ñ—É—Ç–æ–≤")], [KeyboardButton(text="40 —Ñ—É—Ç–æ–≤")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:", reply_markup=markup)
    await state.set_state(Form.type)

@dp.message(Form.type)
async def get_type(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    user_data = await state.get_data()
    if message.text == "20 —Ñ—É—Ç–æ–≤":
        await state.update_data(height="2.6 –º (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)")
        if user_data.get("condition") == "–ë/–£":
            await message.answer("üì∏ –ü—Ä–∏–º–µ—Ä—ã 20-—Ñ—É—Ç–æ–≤—ã—Ö –ë/–£ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
            await message.answer("https://disk.yandex.ru/d/EotWlFU9n7tPFg")
            await message.answer("https://disk.yandex.ru/d/u7I05yGQu2BxOg")
        await ask_urgency(message, state)
    elif message.text == "40 —Ñ—É—Ç–æ–≤":
        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="2.6 –º")], [KeyboardButton(text="2.9 –º")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:", reply_markup=markup)
        await state.set_state(Form.height)

@dp.message(Form.height)
async def get_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    if message.text == "2.6 –º":
        await message.answer("üì∏ –ü—Ä–∏–º–µ—Ä—ã 40-—Ñ—É—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ 2.6 –º:")
        await message.answer("https://disk.yandex.ru/d/tZ6o_IU7BKvfnA")
    elif message.text == "2.9 –º":
        await message.answer("üì∏ –ü—Ä–∏–º–µ—Ä—ã 40-—Ñ—É—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ 2.9 –º:")
        await message.answer("https://disk.yandex.ru/d/LTfvgarLgdT3sA")
    await ask_urgency(message, state)

async def ask_urgency(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–°—Ä–æ—á–Ω–æ")], [KeyboardButton(text="–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏")], [KeyboardButton(text="–ë–µ–∑ —Å—Ä–æ–∫–æ–≤")]],
        resize_keyboard=True
    )
    await message.answer("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä?", reply_markup=markup)
    await state.set_state(Form.urgency)

@dp.message(Form.urgency)
async def get_urgency(message: Message, state: FSMContext):
    await state.update_data(urgency=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"7\d{10}", phone):
        await message.answer("‚ùó –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>79001234567</code>", parse_mode="HTML")
        return

    await state.update_data(phone=phone)
    user_data = await state.get_data()

    summary = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n"
        f"–ì–æ—Ä–æ–¥: {user_data.get('city')}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_data.get('condition')}\n"
        f"–¢–∏–ø: {user_data.get('type')}\n"
        f"–í—ã—Å–æ—Ç–∞: {user_data.get('height')}\n"
        f"–°—Ä–æ–∫: {user_data.get('urgency')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_yes")],
        [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
    ])
    await message.answer(summary, reply_markup=markup, parse_mode="HTML")
    await state.set_state(Form.confirm)

@dp.callback_query(lambda c: c.data == "confirm_yes")
async def confirm(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([
        now,
        data.get("city"), data.get("condition"), data.get("type"),
        data.get("height"), data.get("urgency"), data.get("phone")
    ])
    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.clear()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))